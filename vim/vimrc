" ~/dot_files/vim/vimrc
" OR
" ~/.vimrc

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NeoVim 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make NeoVim use the same runtime directory as vim
" I'm not sure if this is entirely safe,
" but it is advised by the NeoVim manual `:h nvim`
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath=&runtimepath

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins (managed by plug.vim)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug (Plug) requires the following:
"   git
"   curl
" To install Plug install run:
"   !curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" Then run:
"
"   :PlugInstall
"
" For plugins that require python run:
"   !pip3 install --user --upgrade pynvim
" Then to check the installation run:
"   :checkhealth

call plug#begin('~/.vim/plugged')

" Conquer of completion
" Provides a Language Server Protocol (LSP) interface
" Facilitates the use of VSCode plugins
" Use release branch (recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = ['coc-json', 'coc-tsserver', 'coc-eslint', 'coc-prettier']

" Javascript, Typescript and JSX syntax highlighting.
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'

" Pandoc
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'

" Base-16 colourschemes
Plug 'chriskempson/base16-vim'

" Git gutter signs
" Should I try coc-git?
Plug 'airblade/vim-gitgutter'

" All Plugs must be added before the following line
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Visual 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use the the base16-colour-scheme
" Works best if the terminal is themed using a base16 theme.
set runtimepath+=~/dot_files/vim
" Colourscheme
"colorscheme base16-monokai-ajp
colorscheme base16-default-dark
" Show a few lines of context around the cursor.  Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5
" Display nicely on terminals with dark backgrounds
set background=dark
" Always show the status line
" Actually redundant when statusline is set.
set laststatus=2
" Customise the display of non-visual characters in list mode.
set listchars=tab:>-,trail:_,nbsp:+

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set the maximum textwidth to 80 characters.
"set textwidth=80
" Always display the signcolumn, so the scree doesn't jump around.
set signcolumn=yes
" Load the relevant plugins upon opening a buffer.
filetype plugin indent on
" Reload files when they have been changed outside vim.
set autoread
" Make backspace more useful.
set backspace=indent,eol,start
" Don't ring at me!
set belloff=all
" Don't put temporary files in the current directory
set directory-=.
" Use UTF8 encoding within vim
set encoding=utf-8
" Do a lot more autoformatting
set formatoptions=tcrj
" Allow switching the active buffer without saving.
set hidden
" Disable modelines as they are not secure
set nomodeline
" Jump to the last used place in buffers when opening them.
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
" Use <leader>c to start searching for cheat sheets
"nnoremap <leader>c :find ~/dot_files/cheatsheets/**/*
" If trying to open a non-existing file with gf, then create it
map gf :e %:h/<cfile><CR>
set nowrap

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Searching
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore the case of searches
set ignorecase 
" unless the term contains uppercase characters.
set smartcase
" Highlight search matches
set hlsearch
" Show matches as they are typed
set incsearch

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Wildmenu 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use the wildmenu to match vim command line entries
set wildmenu
" When pressing <tab> once complete to the longest match
" Upon a second press match to the full length of the 
" first match.
set wildmode=longest:full,full
" Ignore case when wildmenu matching
set wildignorecase

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Markdown 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings for vim's inbuilt markdown syntax and filetype
" plugins
let g:markdown_fenced_languages = ['vim', 
            \ 'rust',
            \ 'r',
            \ 'c',
            \ 'cpp',
            \ 'haskell',
            \ 'cs' ]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabstop Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" How much space should a tab character occupy (at most)
set tabstop=4
" Use tabstop as the shiftwidth value
set shiftwidth=0
" Insert spaces instead of tabs in insert mode. Use spaces for indents
set expandtab
" Start new lines with the same indent as the previous ones
set autoindent

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-pandoc
" vim-pandoc-syntax
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:pandoc#command#autoexec_on_writes = 1
"let g:pandoc#command#autoexec_command = "Pandoc pdf"
" Disable all of the keyboard mappings
let g:pandoc#keyboard#use_default_mappings=0
" Disable the hyper-text follow keyboard mappings
let g:pandoc#modules#disabled = ["hypertext"]
" Disable the unsettling concealed syntax highlighting.
let g:pandoc#syntax#conceal#use = 0
" Highlight all these languages if they appear in labeled
" verbatim (code) blocks.
let g:pandoc#syntax#codeblocks#embeds#langs = ["bash=sh",
            \ "rust",
            \ "r",
            \ "cpp",
            \ "c",
            \ "haskell",
            \ "vim",
            \ "cs" ]
" Leave the table of contents bar open.
let g:pandoc#toc#close_after_navigating = 0

augroup pandoc_ft 
  autocmd!
"  autocmd BufRead,BufNewFile *.{md} setlocal filetype=pandoc.markdown
  autocmd Filetype pandoc setlocal spell
  autocmd Filetype pandoc syntax spell toplevel	
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Javascript, Typescript and JSX
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set filetypes as typescriptreact
autocmd BufNewFile,BufRead *.js set filetype=javascript
autocmd BufNewFile,BufRead *.jsx set filetype=javascriptreact
autocmd BufNewFile,BufRead *.ts set filetype=typescript
autocmd BufNewFile,BufRead *.tsx set filetype=typescriptreact

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 'neoclide/coc.nvim', {'branch': 'release'}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" May need for vim (not neovim) since coc.nvim calculate byte offset by count
" utf-8 byte sequence.
set encoding=utf-8
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for refactor code actions.
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}%=%l\ %P

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

